<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000"/>
		<property name="deleteInvalidSessions" value="true"/>
		<property name="sessionDAO" ref="sessionDAO"/>
		<property name="sessionIdCookieEnabled" value="true"/>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<property name="cacheManager" ref="shiroEhcacheManager"/>
	</bean>
	<!-- 会话DAO，sessionManager里面的session需要保存在会话Dao里，没有会话Dao，session是瞬时的，没法从
  sessionManager里面拿到session -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
	</bean>
	<!-- 缓存管理器 -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="-1"/>
	</bean>
	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
	<bean id="kickoutSessionControlFilter"  class="com.video.edu.me.shiro.KickoutSessionFilter">
		<property name="sessionManager" ref="sessionManager"/>
		<property name="cacheManager" ref="shiroEhcacheManager"/>
		<property name="kickoutAfter" value="false"/>
		<property name="maxSession" value="1"/>
		<property name="kickoutUrl" value="/api/user/noLogin"/>
	</bean>
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler ">
		<property name="interval" value="1800000"/>
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	<!-- Shiro Filter 拦截器相关配置 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- securityManager -->
		<property name="securityManager" ref="securityManager" />
		<!-- 登录路径 -->
		<property name="loginUrl" value="/api/user/noLogin" />
		<!-- 用户访问无权限的链接时跳转此页面  -->
		<property name="unauthorizedUrl" value="/api/user/noLogin" />

		<!-- 过滤链定义 -->
		<property name="filters">
			<map>
				<entry key="kickout" value-ref="kickoutSessionControlFilter"/>
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/user/noLogin = anon
				/user/checkLogin = anon
				/user/login = anon
				/admin/user/checkLogin = anon
				/admin/user/login = anon
				/admin/** = kickout, authc,roles[admin]
				/** = kickout, user, roles[user]
			</value>
		</property>
	</bean>

	<!-- securityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<property name="sessionManager" ref="sessionManager"/>
		<property name="cacheManager" ref="shiroEhcacheManager"/>
	</bean>
	<!-- 自定义Realm实现 -->
	<bean id="myRealm" class="com.video.edu.me.shiro.MyShiroRealm" />

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>